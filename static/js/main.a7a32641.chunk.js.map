{"version":3,"sources":["Form.js","App.js","serviceWorker.js","index.js"],"names":["TextWithCounter","props","react_default","a","createElement","style","textAlign","color","className","id","placeholder","rows","name","value","onChange","length","Form","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","fname","lname","email","message","showErrors","handleChange","bind","assertThisInitialized","handleSubmit","e","setState","defineProperty","target","match","preventDefault","_this$state","errors","validate","formData","FormData","set","axios","method","url","data","then","response","console","log","catch","_this$state2","type","onClick","React","Component","App","src_Form_0","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a7a32641.chunk.js","sourcesContent":["import React from 'react'\nimport './Form.css'\nimport axios from 'axios'\n\nclass Form extends React.Component{\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      fname: '',\n      lname: '',\n      email: '',\n      message: '',\n      showErrors: false\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  handleChange(e) {\n    this.setState({[e.target.name]: e.target.value})\n  }\n\n  validate(fname, lname, email, message) {\n    return {\n      fname: this.state.fname.length === 0,\n      lname: this.state.lname.length === 0,\n      email: !(this.state.email).match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i),\n      message: this.state.message.length > 500 || this.state.message.length === 0\n    }\n  }\n  \n  handleSubmit(e) {\n    e.preventDefault()\n    const { fname, lname, email, message} = this.state\n    const errors = this.validate(fname, lname, email, message)\n    if (!(errors.fname || errors.lname || errors.email || errors.message)) {\n      var formData = new FormData();\n      formData.set('first', fname)\n      formData.set('last', lname)\n      formData.set('email', email)\n      formData.set('message', message)\n      axios({\n        method: 'post',\n        url: 'https://52.15.184.142:80/feedback',\n        data: formData\n      })\n      .then(function(response) {\n        console.log('POST SUCCESS')\n        console.log(response.data)\n      })\n      .catch(function(response) {\n        console.log('POST ERROR:')\n        console.log(response)\n      })\n      console.log('end')\n    }\n    this.setState({showErrors: true})\n    return false\n  }\n\n  render() {\n    const { fname, lname, email, message } = this.state\n    var errors\n    if (this.state.showErrors) {\n      errors = this.validate(fname, lname, email, message)\n    } else {\n      errors = {\n        fname: false,\n        lname: false, \n        email: false,\n        message: false\n      }\n    }\n                                \n     return <div>\n      <form className=\"mx-auto\" id=\"form\">\n        <h1 className=\"form-title\">Feedback</h1>\n        <div className=\"form-group\">\n          <input \n            type=\"text\" \n            className={\"form-control \" + (errors.fname ? \"error\" : \"\")}\n            name=\"fname\" \n            placeholder=\"First Name\" \n            value={fname}\n            onChange={this.handleChange}\n          /><br />\n          <input \n            type=\"text\" \n            className={\"form-control \" + (errors.lname ? \"error\" : \"\")} \n            name=\"lname\" \n            placeholder=\"Last Name\" \n            value={lname}\n            onChange={this.handleChange}\n          /><br />\n          <input \n            type=\"email\" \n            className={\"form-control \" + (errors.email ? \"error\" : \"\")}\n            name=\"email\" \n            placeholder=\"john@example.com\" \n            value={email}\n            onChange={this.handleChange}\n          /><br />\n          <TextWithCounter\n            className={\"form-control  \" + (errors.message ? \"error\" : \"\")}\n            name=\"message\"\n            onChange={this.handleChange}\n            value={message}>\n          </TextWithCounter><br />\n          <button \n            type=\"submit\" \n            className={\"btn btn-primary\"} \n            onClick={this.handleSubmit}>\n            Submit\n          </button>\n        </div>\n      </form> \n    </div>\n  }\n}\n\nfunction TextWithCounter(props) {\n  return <div style={{'textAlign': 'left', color: '#666'}}>\n            <textarea className={props.className} \n                      id=\"inputMessage\" \n                      placeholder=\"Message\" \n                      rows=\"4\" \n                      name={props.name}\n                      value={props.value} \n                      onChange={props.onChange} />\n            <span>{props.value.length} / 500</span>\n          </div>\n}\n\nexport default Form;","import React from 'react';\nimport './App.css';\nimport Form from './Form'\n\nfunction App() {\n  return (\n  <div className=\"App\">\n    <Form />\n  </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}